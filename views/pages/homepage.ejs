<div class="container mt-5">
  <h1 class="mb-4">Sails.js API Documentation</h1>

  <p>Esta é a documentação dos endpoints da API Sails.js utilizada neste projeto.</p>

  <h2>Endpoints</h2>

  <h3>GET /aluno</h3>
  <p>Este endpoint retorna uma lista de todos os alunos cadastrados no sistema.</p>

  <h3>GET /aluno/:id</h3>
  <p>Este endpoint retorna os detalhes de um aluno específico com o ID fornecido na URL.</p>

  <h3>POST /aluno</h3>
  <p>Este endpoint cria um novo aluno com os dados fornecidos no corpo da requisição.</p>

  <h3>PUT /aluno/:id</h3>
  <p>Este endpoint atualiza os dados de um aluno específico com o ID fornecido na URL. Os novos dados são fornecidos no
    corpo da requisição.</p>

  <h3>DELETE /aluno/:id</h3>
  <p>Este endpoint exclui um aluno específico com o ID fornecido na URL.</p>

  <h2>Exemplos de Uso</h2>

  <p>Aqui estão alguns exemplos de como você pode utilizar os endpoints da API:</p>

  <pre>
GET /aluno
- Retorna todos os alunos cadastrados no sistema.

GET /aluno/1
- Retorna os detalhes do aluno com ID 1.

POST /aluno
- Cria um novo aluno com os seguintes dados no corpo da requisição:
  {
    "nome": "João",
    "idade": 25
  }

PUT /aluno/1
- Atualiza os dados do aluno com ID 1 com os seguintes dados no corpo da requisição:
  {
    "nome": "João da Silva",
    "idade": 26
  }

DELETE /aluno/1
- Exclui o aluno com ID 1 do sistema.
    </pre>
</div>
<div class="container mt-5">
  <h1 class="mb-4">Sails.js API Endpoints</h1>

  <!-- Formulário para criar um novo aluno -->
  <div class="card mb-4">
    <div class="card-header bg-primary text-white">
      Criar Novo Aluno
    </div>
    <div class="card-body">
      <form id="createAlunoForm">
        <div class="mb-3">
          <label for="nome" class="form-label">Nome:</label>
          <input type="text" class="form-control" id="nome" name="nome" required>
        </div>
        <div class="mb-3">
          <label for="idade" class="form-label">Idade:</label>
          <input type="number" class="form-control" id="idade" name="idade" required>
        </div>
        <button type="submit" class="btn btn-primary">Criar Aluno</button>
      </form>
    </div>
  </div>

  <!-- Formulário para atualizar dados do aluno -->
  <div class="card mb-4">
    <div class="card-header bg-info text-white">
      Atualizar Dados do Aluno
    </div>
    <div class="card-body">
      <form id="updateAlunoForm">
        <div class="mb-3">
          <label for="id_aluno" class="form-label">ID do Aluno:</label>
          <input type="text" class="form-control" id="id_aluno" name="id_aluno" required>
        </div>
        <div class="mb-3">
          <label for="nome_atualizado" class="form-label">Novo Nome:</label>
          <input type="text" class="form-control" id="nome_atualizado" name="nome_atualizado" required>
        </div>
        <div class="mb-3">
          <label for="idade_atualizada" class="form-label">Nova Idade:</label>
          <input type="number" class="form-control" id="idade_atualizada" name="idade_atualizada" required>
        </div>
        <button type="submit" class="btn btn-info">Atualizar Aluno</button>
      </form>
    </div>
  </div>

  <!-- Lista de alunos -->
  <div class="card">
    <div class="card-header bg-secondary text-white">
      Lista de Alunos
    </div>
    <div class="card-body" id="alunosList">
      <!-- Lista de alunos será preenchida via JavaScript -->
    </div>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script>
  // Função para carregar a lista de alunos
  function carregarListaAlunos() {
    axios.get('/aluno')
      .then(function (response) {
        const alunos = response.data;
        const listaHtml = alunos.map(function (aluno) {
          return `
              <div class="mb-2">
                <strong>ID:</strong> ${aluno.id} - <strong>Nome:</strong> ${aluno.nome} - <strong>Idade:</strong> ${aluno.idade}
                <button type="button" class="btn btn-danger btn-sm" onclick="excluirAluno('${aluno.id}')">Excluir</button>
                <button type="button" class="btn btn-info btn-sm" data-bs-toggle="modal" data-bs-target="#updateModal" onclick="preencherDadosAtualizacao('${aluno.id}', '${aluno.nome}', '${aluno.idade}')">Atualizar</button>
              </div>
            `;
        }).join('');
        document.getElementById('alunosList').innerHTML = listaHtml;
      })
      .catch(function (error) {
        console.error('Erro ao carregar lista de alunos:', error);
      });
  }

  // Carregar lista de alunos ao carregar a página
  document.addEventListener('DOMContentLoaded', function () {
    carregarListaAlunos();
  });

  // Enviar dados para criar um novo aluno
  document.getElementById('createAlunoForm').addEventListener('submit', function (event) {
    event.preventDefault();
    const nome = document.getElementById('nome').value;
    const idade = document.getElementById('idade').value;

    axios.post('/aluno', { nome, idade })
      .then(function () {
        // Atualizar a lista de alunos após a criação
        carregarListaAlunos();
        // Limpar os campos do formulário
        document.getElementById('nome').value = '';
        document.getElementById('idade').value = '';
      })
      .catch(function (error) {
        console.error('Erro ao criar aluno:', error);
      });
  });

  // Função para preencher os dados do formulário de atualização
  function preencherDadosAtualizacao(idAluno, nome, idade) {
    document.getElementById('id_aluno').value = idAluno;
    document.getElementById('nome_atualizado').value = nome;
    document.getElementById('idade_atualizada').value = idade;
  }

  // Enviar dados para atualizar um aluno existente
  document.getElementById('updateAlunoForm').addEventListener('submit', function (event) {
    event.preventDefault();
    const id_aluno = document.getElementById('id_aluno').value;
    const nome_atualizado = document.getElementById('nome_atualizado').value;
    const idade_atualizada = document.getElementById('idade_atualizada').value;

    axios.put(`/aluno/${id_aluno}`, { nome: nome_atualizado, idade: idade_atualizada })
      .then(function () {
        // Atualizar a lista de alunos após a atualização
        carregarListaAlunos();
        // Fechar o modal de atualização
        var modal = document.getElementById('updateModal');
        var bsModal = bootstrap.Modal.getInstance(modal);
        bsModal.hide();
        // Limpar os campos do formulário
        document.getElementById('id_aluno').value = '';
        document.getElementById('nome_atualizado').value = '';
        document.getElementById('idade_atualizada').value = '';
      })
      .catch(function (error) {
        console.error('Erro ao atualizar aluno:', error);
      });
  });

  // Função para excluir um aluno
  function excluirAluno(idAluno) {
    if (confirm('Tem certeza que deseja excluir este aluno?')) {
      axios.delete(`/aluno/${idAluno}`)
        .then(function () {
          // Atualizar a lista de alunos após a exclusão
          carregarListaAlunos();
        })
        .catch(function (error) {
          console.error('Erro ao excluir aluno:', error);
        });
    }
  }
</script>

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
